name: Security CI
on: 
  push:
    paths:
    - 'src/**'
    - '**/pom.xml'
    - 'Dockerfile*'
    - '.github/workflows/ci.yml'
    - '.github/workflows/security-ci.yml'
    - '.github/workflows/xray.yml'
    - '.github/workflows/release-deploy.yml'
    - '.github/workflows/review*.yml'
    - '.github/workflows/version.yml'
    - '.github/workflows/jfrog_cli.yml'
    - '.github/containerscan/allowedlist.yaml'
    - 'sonar-project.properties'

env:
  APP_NAME: ${{ github.event.repository.name }}
  DOCKER_REGISTRY: krogertechnology-kroger-fast-track-docker-local.jfrog.io
  DOCKER_TEST_REGISTRY: krogertechnology-kroger-fast-track-docker-local.jfrog.io
  DOCKER_REGISTRY_REMOTE: krogertechnology-docker.jfrog.io
  DOCKER_REPOSITORY: ${{ github.event.repository.name }}/webapp
  RESOURCE_GROUP_NAME: ${{ secrets.BUILDING_BLOCKS_CENTRALUS_NONPROD_RESOURCE_GROUP }}
  JFROG_SAAS_URL: https://krogertechnology.jfrog.io
  REPO: kroger-fast-track-docker-local

jobs:
  maven-build:
    name: maven build, scan, and push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: 🐸 Install JFrog CLI   
      uses: jfrog/setup-jfrog-cli@v1
      
    - name: 🐸 Configure JFrog CLI  
      run: |
        jfrog config add --url=${{ env.JFROG_SAAS_URL }} --user=${{secrets.DOCKER_USERNAME}} --password='${{secrets.DOCKER_PASSWORD}}' --interactive=false
        jfrog rt mvnc
    
    - name: 🐸 Maven Build
      run: |
        buildnumber="${{github.run_id}}-$RANDOM"
        jfrog rt mvn --build-name=${{github.repository}} --build-number=$buildnumber clean install -B
        
  build:
    name: docker build, scan, and push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v3.x 
      
    - name: 🐳 Docker Login - Registry
      uses: docker/login-action@v1
      with: 
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🐳 Docker Login - Remote Registry
      uses: docker/login-action@v1
      with: 
        registry: ${{ env.DOCKER_REGISTRY_REMOTE }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🐸 Install JFrog CLI   
      uses: jfrog/setup-jfrog-cli@v1
      
    - name: 🐸 Configure JFrog CLI  
      run: |
        jfrog config add --url=${{ env.JFROG_SAAS_URL }} --user=${{secrets.DOCKER_USERNAME}} --password='${{secrets.DOCKER_PASSWORD}}' --interactive=false
        
    - name: 🐳 Docker Build
      run: |
        docker build . --tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }} \
          --tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:latest \
          --tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ env.GITHUB_REF_SLUG }}
    - name: 🔍 Azure Container Scan 🔒
      uses: azure/container-scan@v0
      continue-on-error: true
      with:
        image-name: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ env.GITHUB_REF_SLUG }}

    - name: 🐳 Docker Push
    # buildnumber="${{github.run_id}}-$RANDOM"
      run: |
        jfrog rt docker-push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }} ${{env.REPO}} --build-name=${{github.repository}} --build-number=$buildnumber
        echo "buildnumber=$buildnumber" >> $GITHUB_ENV
    - name: 🐸 XRay Scan 
      # It is assumed that the delay here is only due to xray issues in production, causing the CLI to wait for a response indefinitely. 
      # I do not believe the scans should be taking 10 minutes to complete but needs to be verified. JFrog claims these scans should be "instant".
      timeout-minutes: 10
      continue-on-error: true
      id: xrayscan
      run: |
        jfrog rt build-publish ${{github.repository}} ${{env.buildnumber}}
        jfrog rt build-scan ${{github.repository}} ${{env.buildnumber}} --fail=false
        
    - name: 🔔 Notify Developer of XRay Report
      # This should be changed to pass/fail messages once everything is in order
      run: |
        reponame=$(echo ${{github.REPOSITORY}} | sed 's/\//%2F/')
        echo "::warning:: Your XRay security scan has been initiated. Find your results at https://krogertechnology.jfrog.io/ui/builds/$reponame/$buildnumber"
      
  deploy:
    name: continuous deploy 
    if: false
    needs: [test, build]
    runs-on: ubuntu-latest
    steps:
    - name: 🔄 Set environment name variable (branch)
      if: github.ref != 'refs/heads/main'
      run: |
          echo ::set-env name=ENVIRONMENT_NAME::dev
          echo ::set-env name=SLOT_NAME::dev
    - name: 🔄 Set environment name variable (main)
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tag')
      run: |
          echo ::set-env name=ENVIRONMENT_NAME::test
          echo ::set-env name=SLOT_NAME::production
    - id: create-deployment
      uses: mormahr/deployment-action@transient_and_production_environment
      name: 🔄 Create continuous deployment
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.sha }}
        description: ${{ env.ENVIRONMENT_NAME }} deploy of @${{ github.sha }} with image ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}
        environment: ${{ env.ENVIRONMENT_NAME }}
        initial_status: in_progress
    - name: 🔄 Login via Azure CLI ☁️
      uses: azure/login@v1
      with:
        creds: ${{ secrets.BUILDING_BLOCKS_CENTRALUS_NONPROD_AZURE_CREDENTIALS }}
    - name: 🔄 Create slot ☁️
      if: env.SLOT_NAME != 'production'
      run: az webapp deployment slot create --name ${{ env.APP_NAME }}-nonprod --slot ${{ env.SLOT_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --configuration-source ${{ env.APP_NAME }}-nonprod || true
    - name: 🐳 Promote Docker image for deploy
      uses: timperman/artifactory-promote-action@v1
      with:
        url: https://krogertechnologyprodusw.jfrog.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        sourceRepo: docker-local-dev
        targetRepo: docker-local-test
        dockerRepository: ${{ env.DOCKER_REPOSITORY }}
        tag: ${{ github.sha }}
        targetTag: ${{ github.sha }}
    - id: deploy
      name: 🔄 Deploy to App Service ☁️
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.APP_NAME }}-nonprod
        images: ${{ env.DOCKER_TEST_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}
        slot-name: ${{ env.ENVIRONMENT_NAME }}
    - name: 🔄 Update deployment status (success)
      if: success()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        target_url: ${{ steps.deploy.outputs.webapp-url }}
        environment_url: ${{ steps.deploy.outputs.webapp-url }}
        state: success
        deployment_id: ${{ steps.create-deployment.outputs.deployment_id }}
        description: ${{ env.DOCKER_TEST_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}
    - name: 🔄 Update deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        target_url: ${{ steps.deploy.outputs.webapp-url }}
        environment_url: ${{ steps.deploy.outputs.webapp-url }}
        state: failure
        deployment_id: ${{ steps.create-deployment.outputs.deployment_id }}
