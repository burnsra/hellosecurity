name: Xray continuous integration
on: 
  push:
    paths:
    - 'src/**'
    - '**/pom.xml'
    - 'Dockerfile*'
    - '.github/workflows/ci.yml'
    - '.github/workflows/xray.yml'
    - '.github/workflows/release-deploy.yml'
    - '.github/workflows/review*.yml'
    - '.github/workflows/version.yml'
    - '.github/containerscan/allowedlist.yaml'
    - 'sonar-project.properties'

env:
  APP_NAME: ${{ github.event.repository.name }}
  DOCKER_REGISTRY: krogertechnology-kroger-fast-track-docker-local.jfrog.io
  DOCKER_TEST_REGISTRY: krogertechnology-kroger-fast-track-docker-local.jfrog.io
  DOCKER_REGISTRY_REMOTE: krogertechnology-docker.jfrog.io
  DOCKER_REPOSITORY: ${{ github.event.repository.name }}/webapp
  RESOURCE_GROUP_NAME: ${{ secrets.BUILDING_BLOCKS_CENTRALUS_NONPROD_RESOURCE_GROUP }}
  JFROG_SAAS_URL: krogertechnology.jfrog.io/artifactory
  REPO: kroger-fast-track-docker-local

jobs:
  test:
    name: maven test, sonar scan
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2
    - uses: actions/checkout@v2
      with:
        repository: krogertechnology/sonar-scanner
        path: .github/actions/sonar-scanner
        ref: v1
        token: ${{ secrets.SONAR_SCANNER_CHECKOUT_TOKEN }}
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Cache Maven dependencies
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
    - name: ‚úÖ Unit test
      run: mvn -B clean test
    - name: ‚úÖ Check file existence
      id: sonarPropertiesCheck
      uses: andstor/file-existence-action@v1
      with:
        files: "sonar-project.properties"
    - name: ‚úÖ Run Sonar code scan
      if: steps.sonarPropertiesCheck.outputs.files_exists == 'true'
      uses: ./.github/actions/sonar-scanner
      with:
        sonar-token: ${{ secrets.SONAR_TOKEN }}
    - name: ‚úÖ Run Sonar Scan Warning
      if: steps.sonarPropertiesCheck.outputs.files_exists == 'false'
      run: "echo '::warning:: Please add sonar-project.properties see here for details'"
      
      
    - uses: tspascoal/fail-workflow-on-alerts-action@v0
      #id: alerts
      with:
        max_errors: 0 # optional. Skip or -1 to ignore alerts
        max_warnings: 0 # optional. Skip or -1 to ignore alerts
        max_notes: 0 # optional. Skip or -1 to ignore alerts

#- run: |
 #   echo number errors ${{ steps.alerts.outputs.error }}
  #  echo number warnings ${{ steps.alerts.outputs.warning }}
   # echo number notes ${{ steps.alerts.outputs.note }}

      
  build:
    name: docker build, scan, and push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v2.x 
    - name: docker login
      uses: docker/login-action@v1
      with: 
        registry: ${{ env.DOCKER_REGISTRY_REMOTE }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: docker login
      uses: docker/login-action@v1
      with: 
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Docker build
      run: |
        docker build . --tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }} \
          --tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:latest \
          --tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ env.GITHUB_REF_SLUG }}
          
    
        #build_args: baseRegistry=${{ env.DOCKER_REGISTRY }}
      #labels: org.opencontainers.image.version=${{ env.GITHUB_REF_SLUG }}
    - name: üê≥ Azure container scan üîí
      uses: azure/container-scan@v0
      continue-on-error: true
      with:
        image-name: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ env.GITHUB_REF_SLUG }}
        
    - name: Installing JFrog CLI   
      uses: jfrog/setup-jfrog-cli@v1
      
    - name: Configure JFrog CLI  
      run: |
        jfrog config add --url=${{ env.JFROG_SAAS_URL }} --user=${{secrets.DOCKER_USERNAME}} --password='${{secrets.DOCKER_PASSWORD}}' --interactive=false

    - name: Docker push
      run: |
        buildnumber="${{github.run_number}}-$RANDOM"
        jfrog rt docker-push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }} ${{env.REPO}} --build-name=${{github.repository}} --build-number=$buildnumber
        echo "buildnumber=$buildnumber" >> $GITHUB_ENV
      #docker push  ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}
      
      
    - name: Xray Scan 
      run: |
        jfrog rt build-publish ${{github.repository}} ${{env.buildnumber}}
        jfrog rt build-scan ${{github.repository}} ${{env.buildnumber}}
        
  deploy:
    name: continuous deploy 
    if: false
    needs: [test, build]
    runs-on: ubuntu-latest
    steps:
    - name: üîÑ Set environment name variable (branch)
      if: github.ref != 'refs/heads/main'
      run: |
          echo ::set-env name=ENVIRONMENT_NAME::dev
          echo ::set-env name=SLOT_NAME::dev
    - name: üîÑ Set environment name variable (main)
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tag')
      run: |
          echo ::set-env name=ENVIRONMENT_NAME::test
          echo ::set-env name=SLOT_NAME::production
    - id: create-deployment
      uses: mormahr/deployment-action@transient_and_production_environment
      name: üîÑ Create continuous deployment
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.sha }}
        description: ${{ env.ENVIRONMENT_NAME }} deploy of @${{ github.sha }} with image ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}
        environment: ${{ env.ENVIRONMENT_NAME }}
        initial_status: in_progress
    - name: üîÑ Login via Azure CLI ‚òÅÔ∏è
      uses: azure/login@v1
      with:
        creds: ${{ secrets.BUILDING_BLOCKS_CENTRALUS_NONPROD_AZURE_CREDENTIALS }}
    - name: üîÑ Create slot ‚òÅÔ∏è
      if: env.SLOT_NAME != 'production'
      run: az webapp deployment slot create --name ${{ env.APP_NAME }}-nonprod --slot ${{ env.SLOT_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --configuration-source ${{ env.APP_NAME }}-nonprod || true
    - name: üê≥ Promote Docker image for deploy
      uses: timperman/artifactory-promote-action@v1
      with:
        url: https://krogertechnologyprodusw.jfrog.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        sourceRepo: docker-local-dev
        targetRepo: docker-local-test
        dockerRepository: ${{ env.DOCKER_REPOSITORY }}
        tag: ${{ github.sha }}
        targetTag: ${{ github.sha }}
    - id: deploy
      name: üîÑ Deploy to App Service ‚òÅÔ∏è
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.APP_NAME }}-nonprod
        images: ${{ env.DOCKER_TEST_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}
        slot-name: ${{ env.ENVIRONMENT_NAME }}
    - name: üîÑ Update deployment status (success)
      if: success()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        target_url: ${{ steps.deploy.outputs.webapp-url }}
        environment_url: ${{ steps.deploy.outputs.webapp-url }}
        state: success
        deployment_id: ${{ steps.create-deployment.outputs.deployment_id }}
        description: ${{ env.DOCKER_TEST_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}
    - name: üîÑ Update deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        target_url: ${{ steps.deploy.outputs.webapp-url }}
        environment_url: ${{ steps.deploy.outputs.webapp-url }}
        state: failure
        deployment_id: ${{ steps.create-deployment.outputs.deployment_id }}
        
